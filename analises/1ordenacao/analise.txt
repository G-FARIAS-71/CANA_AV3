
********************************************************************************************************************************************************************

Linha        Código: Insertion Sort (força bruta)      Custo        Vezes      Total
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
   procedimento InsertionSort(a1, a2, a3, ..., an)    	
1      para j de 2 até n                         	c1          n-1      c1 x (n-1)
2         x <- aj                               	c2          n-1      c2 x (n-1)
3         i <- j - 1                            	c3          n-1      c3 x (n-1)
4         enquanto i > 0 e ai > x                	c4          Σ(j-1)   c4 x Σ(j-1)
5            ai + 1 <- ai                       	c5          Σ(j-1)   c5 x Σ(j-1)
6            i <- i - 1                         	c6          Σ(j-1)   c6 x Σ(j-1)
7         ai + 1 <- x                            	c7          n-1      c7 x (n-1)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

T(n)=c1⋅(n−1) + c2⋅(n−1) + c3⋅(n−1) + c4⋅((j−1)⋅j)/2 + c5((j−1)⋅j)/2 + c6⋅((j−1)⋅j)/2 + c7⋅(n−1)

O(n)= n^2 (A complexidade de tempo é dominada pelo termo quadrático de Σ(j−1), que é O(n^2)no pior caso.)

A complexidade de espaço é O(1), pois o algoritmo usa uma quantidade fixa de espaço independente do tamanho de entrada n.

OBS:
Σ(j−1)= a soma de 1 até j−1, que é ((j−1)⋅j)/2

********************************************************************************************************************************************************************

​Linha        Código: Quick Sort (divisão e conquista)              Custo          Vezes          Total
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
1            procedimento QuickSort(a1, a2, a3, ..., an, p, r)      c1             1              c1
2               se p < r                                            c2             1              c2
3                  q <- Partition(a1, a2, a3, ..., an, p, r)        c3             1              c3
4                  QuickSort(a1, a2, a3, ..., an, p, q-1)           c4           T(q-p)         c4 x  T(q-p) 
5                  QuickSort(a1, a2, a3, ..., an, q+1, r)           c5           T(r-q)         c5 x  T(r-q)   

6            funcao Partition(a1, a2, a3, ..., an, p, r)            c6             1              c6
7               x <- ar                                             c7             1              c7
8               i <- p-1                                            c8             1              c8
9               para j de p até r-1                                 c9            r-p+1         c9 x (r-p+1)
10                 se aj >= x então                                 c10           r-p          c10 x (r-p)
11                    i <- i+1                                      c11           r-p          c11 x (r-p)
12                    trocar ai com aj                              c12           r-p          c12 x (r-p)
13              trocar ai+1 com ar                                  c13            1              c13
14              retornar i+1                                        c14            1              c14
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                             
T(n) = c1 + c2 + c3 +  c4 x  T(q-p) + c5 x  T(r-q) + c6 + c7 + c8 + c9 x (r-p+1) + c10 x (r-p) + c11 x (r-p) + c12 x (r-p) + c13 + c14 ... Θ = (n^2)
A complexidade de tempo é dominada pela chamada recursiva com o tamanho máximo da partição. Foi considerado o pior caso Θ = (n^2)
A complexidade de espaço é O(logn), devido à profundidade máxima da recursão.


********************************************************************************************************************************************************************

​Linha        Código: Bubble Sort (força bruta)                 Custo          Vezes          Total
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
	procedimento BubbleSort(a1, a2, a3, ..., an)           
 1  	   para i de 1 até n                           		c1           n          c1 x n
 2    	      para j de 1 até n-i                      		c2         Σ(n-i)       c2 x Σ(n-i)
 3               se aj < aj+1 então trocar aj com aj+1          c3         Σ(n-i)       c3 x Σ(n-i)                                		
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

T(n)= c1⋅n + c2⋅Σ(n−i) + c3⋅Σ(n−i) 
​ 	
O(n)= n^2 (A complexidade de tempo é dominada pelo termo quadrático de Σ(n−i), que é O(n^2)no pior caso.)

A complexidade de espaço é O(1), pois o algoritmo usa uma quantidade fixa de espaço independente do tamanho de entrada n.

OBS:
Σ(n−i) representa a soma de 1 até n−i, que é ((n−i)⋅(n−i + 1))/2

********************************************************************************************************************************************************************




